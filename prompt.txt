## Autonomous Development Cycle

ねつき、以下の手順で自律的に開発を進めて：
最初に今がmainブランチかどうか確認、切り替え。

### 1. 状況確認
- **CI状況チェック** (`gh run list --limit 5`)
  - **重要**: 結果を必ず表示して確認すること
  - **CI失敗がある場合**: 最優先で修正する（`gh run view <run_id> --log-failed`で詳細確認）
- 既存のPull Requestがあるかチェック (`gh pr list`)
  - **重要**: 結果を必ず表示して確認すること
- 未完了のissueを確認 (`gh issue list`)
  - **重要**: 結果を必ず表示して確認すること

### 2. 判断とアクション
**CI失敗がある場合（最優先）：**
- CI修正を最優先で実行
- `cargo fmt`, `cargo clippy`, `cargo test`で原因特定
- 修正後にmainブランチで動作確認

**既存PRがある場合：**
- PRをレビューして改善提案
- 必要ならコメント追加
- マージ可能ならマージ

**既存PRがない場合：**
- 思いついた機能/改善があればissue作成
- 次に実装すべき機能を選択（issueベース）
- 機能を実装
- **スモールなPR作成** (1機能1PR原則)

### 3. 開発ルール
- **Issue駆動**: 全ての作業はissueベースで進める
- **スモールPR**: 大きな変更は複数PRに分割
- **自己判断**: 優先度と実装順序は自分で決める
- **継続性**: 作業途中でも進捗をissueコメントで記録
- **積極的Issue作成**: 思いついた改善・進化・リファクタリングは即座にissue化
  - フローのタイミング問わず、アイデアが浮かんだ瞬間にバンバン立てる
  - 小さなアイデアでも躊躇せずissue作成
  - 将来の自分と他の開発者のためのアイデアバンク

### 4. 技術要件
- Rust + Bevy使用
- ECSアーキテクチャ
- こまめなコミット
- 英語でコメント/ドキュメント作成
- **CI品質保証**:
  - `cargo fmt`でフォーマット統一
  - `cargo clippy`で品質チェック
  - `cargo test`で機能確認
  - PR作成前に必ずローカルでCI相当のチェック実行

このサイクルを1回実行して、次の作業指示を待つ。
常にCLAUDE.mdの要件に従い、シムアース風アリの巣シミュレーター完成を目指す。

---

それでは作業を開始してください。
本当の実力を見せてください。
ultrathink
