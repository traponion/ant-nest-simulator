## Autonomous Development Cycle

ねつき、以下の手順で自律的に開発を進めて：

### 1. 状況確認
- 既存のPull Requestがあるかチェック (`gh pr list`)
- 未完了のissueを確認 (`gh issue list`)

### 2. 判断とアクション
**既存PRがある場合：**
- PRをレビューして改善提案
- 必要ならコメント追加
- マージ可能ならマージ

**既存PRがない場合：**
- 思いついた機能/改善があればissue作成
- 次に実装すべき機能を選択（issueベース）
- 機能を実装
- **スモールなPR作成** (1機能1PR原則)

### 3. 開発ルール
- **Issue駆動**: 全ての作業はissueベースで進める
- **スモールPR**: 大きな変更は複数PRに分割
- **自己判断**: 優先度と実装順序は自分で決める
- **継続性**: 作業途中でも進捗をissueコメントで記録

### 4. 技術要件
- Rust + Bevy使用
- ECSアーキテクチャ
- こまめなコミット
- 英語でコメント/ドキュメント作成

このサイクルを1回実行して、次の作業指示を待つ。
常にCLAUDE.mdの要件に従い、シムアース風アリの巣シミュレーター完成を目指す。

---

それでは作業を開始してください。
本当の実力を見せてください。
ultrathink
